import torch
import torch.nn as nn

class ex(nn.Module):
    def __init__(self, nchannels=6, nclasses=5):
        super(ex, self).__init__()
        self.conv1 = nn.Conv1d(in_channels=nchannels, out_channels=64, kernel_size=3, padding=1)
        self.conv2 = nn.Conv1d(in_channels=64, out_channels=64, kernel_size=3, padding=1)
        self.pool1 = nn.MaxPool1d(kernel_size=2)
        self.relu1 = nn.ReLU()
        self.conv3 = nn.Conv1d(in_channels=64, out_channels=64, kernel_size=3, padding=1)
        self.conv4 = nn.Conv1d(in_channels=64, out_channels=64, kernel_size=3, padding=1)
        self.pool2 = nn.MaxPool1d(kernel_size=2)
        self.relu2 = nn.ReLU()
        self.conv5 = nn.Conv1d(in_channels=64, out_channels=128, kernel_size=3, padding=1)
        self.conv6 = nn.Conv1d(in_channels=128, out_channels=128, kernel_size=3, padding=1)
        self.pool3 = nn.MaxPool1d(kernel_size=2)
        self.relu3 = nn.ReLU()
        self.conv7 = nn.Conv1d(in_channels=128, out_channels=128, kernel_size=3, padding=1)
        self.conv8 = nn.Conv1d(in_channels=128, out_channels=128, kernel_size=3, padding=1)
        self.pool4 = nn.MaxPool1d(kernel_size=2)
        self.relu4 = nn.ReLU()
        self.conv9 = nn.Conv1d(in_channels=128, out_channels=128, kernel_size=3, padding=1)
        self.conv10 = nn.Conv1d(in_channels=128, out_channels=128, kernel_size=3, padding=1)
        self.pool5 = nn.MaxPool1d(kernel_size=2)
        self.relu5 = nn.ReLU()
        self.conv11 = nn.Conv1d(in_channels=128, out_channels=128, kernel_size=3, padding=1)
        self.conv12 = nn.Conv1d(in_channels=128, out_channels=128, kernel_size=3, padding=1)
        self.pool6 = nn.MaxPool1d(kernel_size=2)
        self.relu6 = nn.ReLU()
        self.conv13 = nn.Conv1d(in_channels=128, out_channels=128, kernel_size=3, padding=1)
        self.conv14 = nn.Conv1d(in_channels=128, out_channels=128, kernel_size=3, padding=1)
        self.pool7 = nn.MaxPool1d(kernel_size=2)
        self.relu7 = nn.ReLU()
        self.flatten = nn.Flatten()
        self.fc1 = nn.Linear(in_features=2048, out_features=2048)
        self.relu8 = nn.ReLU()
        self.fc2 = nn.Linear(in_features=2048, out_features=nclasses)

        self.fc2 = nn.Linear(in_features=2048, out_features=nclasses)
    def forward(self, x):
        x = self.conv1(x)
        x = self.conv2(x)
        x = self.pool1(x)
        x = self.relu1(x)
        x = self.conv3(x)
        x = self.conv4(x)
        x = self.pool2(x)
        x = self.relu2(x)
        x = self.conv5(x)
        x = self.conv6(x)
        x = self.pool3(x)
        x = self.relu3(x)
        x = self.conv7(x)
        x = self.conv8(x)
        x = self.pool4(x)
        x = self.relu4(x)
        x = self.conv9(x)
        x = self.conv10(x)
        x = self.pool5(x)
        x = self.relu5(x)
        x = self.conv11(x)
        x = self.conv12(x)
        x = self.pool6(x)
        x = self.relu6(x)
        x = self.conv13(x)
        x = self.conv14(x)
        x = self.pool7(x)
        x = self.relu7(x)
        x = self.flatten(x)
        x = self.fc1(x)
        x = self.relu8(x)
        x = self.fc2(x)
        return x

        
